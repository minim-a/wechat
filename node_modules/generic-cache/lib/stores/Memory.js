// Generated by CoffeeScript 1.10.0
(function() {
  var Cache, EventEmitter, _, convert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  EventEmitter = require('events').EventEmitter;

  convert = require('unit-converter');

  Cache = (function(superClass) {
    extend(Cache, superClass);

    function Cache(_options) {
      this._options = _options != null ? _options : {};
      this._data = {};
      this.stats = {
        hits: 0,
        misses: 0,
        keys: 0
      };
      this._options = _.extend({
        ttl: 60 * 5 * 1000,
        clearPeriod: 60 * 1000
      }, this._options);
      if (!isFinite(this._options.ttl)) {
        this._options.ttl = convert(this._options.ttl).to('ms');
      }
      this._checkData();
    }

    Cache.prototype.get = function(key) {
      this.emit('get', key);
      if (this._data[key] && !this._valueExpired(this._data[key])) {
        this.stats.hits++;
        this.emit('hit', key);
        return this._data[key].value;
      } else {
        this.stats.misses++;
        this.emit('miss', key);
        return void 0;
      }
    };

    Cache.prototype.set = function(key, value, ttl) {
      var data;
      if (ttl == null) {
        ttl = this._options.ttl;
      }
      this.emit('set', key, value);
      data = {
        value: value
      };
      if (ttl) {
        if (!isFinite(ttl)) {
          ttl = convert(ttl).to('ms');
        }
        data.expire = (Date.now()) + ttl;
      }
      if (!this._data[key]) {
        this.stats.keys++;
      }
      return this._data[key] = data;
    };

    Cache.prototype["delete"] = function(key) {
      if (this._data[key]) {
        this.emit('delete', key);
        this.stats.keys--;
        return delete this._data[key];
      }
    };

    Cache.prototype._checkData = function() {
      var key, now, ref, value;
      now = Date.now();
      ref = this._data;
      for (key in ref) {
        value = ref[key];
        if (this._valueExpired(value, now)) {
          this._expire(key);
        }
      }
      return setTimeout((function(_this) {
        return function() {
          return _this._checkData();
        };
      })(this), this._options.clearPeriod);
    };

    Cache.prototype._valueExpired = function(value, now) {
      now = now || Date.now();
      return value.expire && value.expire < now;
    };

    Cache.prototype._expire = function(key) {
      this.emit('expired', key);
      return this["delete"](key);
    };

    return Cache;

  })(EventEmitter);

  module.exports = Cache;

}).call(this);
