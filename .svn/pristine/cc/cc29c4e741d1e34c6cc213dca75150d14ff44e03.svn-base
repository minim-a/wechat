// Generated by CoffeeScript 1.10.0
(function() {
  var UnitConverter, getUnit, systems;

  getUnit = require('get-unit');

  systems = {
    'time': require('./systems/time'),
    'byte': require('./systems/byte')
  };

  UnitConverter = (function() {
    function UnitConverter(value, unitSymbol1) {
      var err, error, ref, ref1;
      this.unitSymbol = unitSymbol1;
      try {
        this.unitSymbol = this.unitSymbol || getUnit(value);
        ref = this._systemFromUnitSymbol(this.unitSymbol), this.system = ref[0], this.unit = ref[1];
      } catch (error) {
        err = error;
      }
      this.baseValue = parseFloat(String(value).replace(this.unitSymbol, '')) * (((ref1 = this.unit) != null ? ref1.ratio : void 0) || 1);
    }

    UnitConverter.prototype._systemFromUnitSymbol = function(unitSymbol) {
      var _unit, name, system;
      for (name in systems) {
        system = systems[name];
        _unit = this._getUnitFromSystem(unitSymbol, system);
        if (_unit) {
          return [system, _unit];
        }
      }
      throw new Error('unknown system for unit ' + unitSymbol);
    };

    UnitConverter.prototype._getUnitFromSystem = function(unit, system) {
      var ref, ref1, ref2;
      return ((ref = system.units) != null ? ref[unit] : void 0) || ((ref1 = system.units) != null ? ref1[(ref2 = system.aliases) != null ? ref2[unit] : void 0] : void 0);
    };

    UnitConverter.prototype.getUnitSymbol = function() {
      return this.unitSymbol;
    };

    UnitConverter.prototype.getBaseUnit = function() {};

    UnitConverter.prototype.to = function(unitSymbol) {
      var error, system, toUnit, value;
      if (!this.system && !unitSymbol) {
        throw new Error('you must specify at least one unit');
      }
      system = this.system || this._systemFromUnitSymbol(unitSymbol)[0];
      toUnit = null;
      try {
        toUnit = this._getUnitFromSystem(unitSymbol || system.baseUnit, system);
      } catch (error) {
        toUnit = {
          ratio: 1
        };
      }
      if (!toUnit) {
        throw new Error('unknown unit ' + unitSymbol + ' for ' + system.name + ' system');
      }
      value = this.baseValue;
      return value / toUnit.ratio;
    };

    UnitConverter.prototype.toBase = function() {
      return this.to();
    };

    return UnitConverter;

  })();

  module.exports = UnitConverter;

}).call(this);
