'use strict';
const Promise = require('bluebird');
const request = Promise.promisify(require('request'));
const wxaccesstoken=require('../lib/accesstoken');
const ticket       =require('../lib/ticket');
const wxticket=require('../lib/ticket');
const config =require('../config/wechat');
const menu = require('../lib/menu');
module.exports = Wechat;
let prefix = 'https://api.weixin.qq.com/cgi-bin/';
let api = {
    access_token: prefix + 'token?grant_type=client_credential',                 //获取access_token
    getWeixinIp: prefix + 'getcallbackip?',                                      //获取微信服务器的ip
    semanticPrefix: 'https://api.weixin.qq.com/semantic/semproxy/search?',       //语义理解接口
    autoreplyInfo: prefix + 'get_current_autoreply_info?',                       //获取公众号的自动回复规则
    //菜单
    menu: {
        createMenu: prefix + 'menu/create?',                          //创建自定义菜单
        inquiryMenu: prefix + 'menu/get?',                            //自定义菜单查询接口
        deleteMenu: prefix + 'menu/delete?',                          //删除菜单查询接口
        getCofigMess: prefix + 'get_current_selfmenu_info?',          //获取自定义菜单配置信息
    },
    //个性化菜单
    specialMenu: {
        createMenu: prefix + 'menu/addconditional?',                 //创建菜单
        deleteMenu: prefix + 'menu/delconditional?',                 //删除菜单
        testMatch: prefix + 'menu/trymatch?',                        //测试个性化菜单匹配结果
        //个性化菜单的删除,查询都和自定义菜单的删除.查询是同一个接口
    },
    //临时素材
    temporary: {
        upload: prefix + 'media/upload?',                                          //上传临时素材
        fetch: prefix + 'media/get?',                                              //获取临时素材
        getImgUrl: prefix + 'media/uploadimg?',                                    //群发消息 上传图文消息内的图片获取url,
        uploadNews: prefix + 'media/uploadnews?',                                  //群发消息 上传图文消息素材
    },
    //永久素材
    permanent: {
        upload: prefix + 'material/add_material?',                               //用于上传图片和视频
        uploadNews: prefix + 'material/add_news?',                               //用于上传图文
        uploadNewsPic: prefix + 'material/uploadimg?',                           //用于上传图文里面的图片
        fetch: prefix + 'material/get_material?',                                //获取永久素材
        delete: prefix + 'material/del_material?',                               //删除永久素材
        modify: prefix + 'material/update_news',                                 //修改永久图文素材
        getCount: prefix + 'material/get_materialcount?',                        //获取永久素材的总数
        batch: prefix + 'material/batchget_material?',                           //获取永久素材的总数
    },
    //标签
    tags: {
        createTag:  prefix + 'tags/create?',                         //创建标签
        inquiryTag: prefix + 'tags/get?',                            //查询用户标签
        editTag: prefix + 'tags/update?',                            //编辑用户标签
        deleteTag: prefix + 'tags/delete?',                          //删除用户标签
        getTagFans: prefix + 'user/tag/get?',                        //获取标签下粉丝列表
        batchTagUers: prefix + 'tags/members/batchtagging?',         //批量为用户创建标签
        batchCancelTag: prefix + 'tags/members/batchuntagging?',     //批量为用户取消标签
        fetchUserTags: prefix + 'tags/getidlist?',                   //获取用户身上的标签列表

    },
    //用户管理
    user: {
        remarkUser: prefix + 'user/info/updateremark?',                 //设置用户备注名
        fetchUserMess: prefix + 'user/info?',                           //获取用户基本信息
        getUserList: prefix + 'user/get?',                              //获取用户列表

    },
    //消息模板
    messTemp: {
        setTemp: prefix + 'template/api_set_industry?',              //设置所属行业
        getTemp: prefix + 'template/get_industry?',                  //获取设置的行业信息
        getTempId: prefix + 'template/api_add_template?',            //获取模板ID
        fetchTempList: prefix +'template/get_all_private_template?', //获取模板列表
        delMessTemp: prefix + 'template/del_private_template?',      //删除模板
        sendTempMess: prefix + 'message/template/send?',             //发送模板消息
    },
    //群发消息
    message: {
        sendMessByTag: prefix + 'message/mass/sendall?',        //根据用户标签进行群发
        sendMessByOpenID: prefix + 'message/mass/send?',        //根据openID列表进行群发
        deleteMess: prefix + 'message/mass/delete?',            //删除群发
        priviewMess: prefix + 'message/mass/preview?',          //预览接口
    },
    //用户管理
    manage: {
        createQrcodeTicket: prefix + 'qrcode/create?',         //请求二维码的 ticket
        createQrcode: prefix + 'showqrcode?',                  //通过ticket获取二维码
        changeToShort:prefix + 'shorturl?',                    //长连接转成短连接
    },
    //获取全局票据
    ticket: {
        get: prefix + 'ticket/getticket?access_token=ACCESS_TOKEN&type=jsapi',
    }
};

/**
 *  向微信服务端请求
 * @param options
 * @param msg
 * @returns {Promise<any>}
 */
function httpRequest(options, msg) {
    return new Promise(function (resolve, reject) {
            request(options)
                .then(function (response) {
                    let _data = response.body;
                    if(_data) {
                        console.log("Response "+msg+":"+_data);
                        resolve(_data)
                    }else {
                        throw new Error(msg + ' error')
                    }
                })
                .catch(function (err) {
                    reject(err)
                })
        })
};


function Wechat(){
}

Wechat.init = function(){
    if (!Wechat._init){
        Wechat._init=true;
        Wechat.fetchAccessToken().then(function (response) {
           // Wechat.deleteDefineMenu();
           // Wechat.createDefineMenu(menu);
        });
    }
};


Wechat.deleteDefineMenu=function(){
    let that = this,url = api.menu.deleteMenu + 'access_token=' + that.access_token;
    let options = {method: 'GET', url: url, json: true}
    return httpRequest(options, 'deleteDefineMenu');
}

Wechat.createDefineMenu = function(){
    let that = this;
    let url = api.menu.createMenu + 'access_token=' + that.access_token;
    let options = {method: 'POST', url: url, body: menu, json: true};
    return httpRequest(options, 'createDefineMenu');
}

/**
 *  拿取 wechat access token
 */
Wechat.fetchAccessToken = function(){
    let that = this;
    let appID = config.appId;
    let appSecret = config.appSecret;
    let url = api.access_token + '&appid=' + appID + '&secret=' + appSecret;
    return new Promise(function (resolve, reject) {
        let data=wxaccesstoken.getAccessToken();
        if(data.length !== 0 && data .expires_in > (new Date().getTime()))  {
            that.access_token = data.access_token || '';
            resolve(data);
        }else{
            request({ url: url,json: true })
                .then(function (response) {
                    var responseData = response.body;
                    that.access_token = responseData.access_token || '';
                    responseData.expires_in = new Date().getTime() + 7100 * 1000;
                    wxaccesstoken.saveAccessToken(responseData);
                    resolve(responseData);
                })
                .catch(function (err) {
                    reject(err);
                })
        }
    })
}

/**
 *  用户同意授权，获取code
 * @param subjoin   附带的值，用于区分是访客户，还是员工
 */
Wechat.getWxCodeUrl =function(subjoin){
    //let subjoin=req.query.subjoin;
    let url="https://open.weixin.qq.com/connect/oauth2/authorize?appid=";
    url='https://open.weixin.qq.com/connect/oauth2/authorize?appid=';
    url+=config.appId;
    url+='&redirect_uri=';
    url+=encodeURIComponent("http://minima.mynatapp.cc/wechat/oauth");
    url+='&response_type=code&scope=snsapi_userinfo&state=';
    url+=subjoin;
    url+='#wechat_redirect';
    return url;
};

Wechat.getOauth2Token =function(code,subjoin){
    let url = 'https://api.weixin.qq.com/sns/oauth2/access_token?appid=';
    url +=config.appId;
    url +='&secret=';
    url +=config.appSecret;
    url +='&code=';
    url +=code+'&grant_type=authorization_code';
    return new Promise (function (resolve,reject) {
        request.get(url,function(err,httpResponse,body){
            //res.json(body);
            if (err) return reject(err);
            let data = JSON.parse(body);
            let access_token = data.access_token;
            let openid = data.openid;
            let userUri = 'https://api.weixin.qq.com/sns/userinfo?access_token='+access_token+'&openid='+openid+'&lang=zh_CN';
            request.get(userUri,function(err,httpResponse,body){
                if (err) reject(err);
                let result={};
                result.subjoin=subjoin;
                result.body=body;
                resolve(result);
            });
        });
    })
};

/**
 * 推送模板消息
 * @param userId
 * @param template_id
 * @param data
 * @param renderUrl
 */
Wechat.pushTemplateMessage =function(userId,template_id,data,renderUrl){
    let that=this;
    return new Promise (function (resolve,reject){
        that.fetchAccessToken().catch(function (err) {
            console.error("获取wechat access token fail! "+err);
            reject(err);
        }).then(function (result) {
            let form =  { "touser": userId,
                "template_id":template_id,
                "data":data,
                "url":renderUrl,
            };
            let  url = api.messTemp.sendTempMess + 'access_token=' + that.access_token;
            let  options = {method: 'POST', url: url, body: form, json: true};
            httpRequest(options,"pushTemplateMessage")
                .catch(function (err) {
                    reject(err);
                }).then(function (result) {
                     resolve(result);
            });
        })
    });
};



Wechat.fetchTicket = function(){
    let that = this;
    return new Promise(function (resolve, reject) {
        let data=ticket.getTicket();
        if(data.length !== 0 && data .expires_in > (new Date().getTime()))  {
            that.ticket = data.ticket || '';
            resolve(data);
        }else{
            that.fetchAccessToken().catch(function (err) {
                console.error("获取wechat access token fail! "+err);
                reject(err);
            }).then(function (result) {
                let  url = api.ticket.get.replace('ACCESS_TOKEN',that.access_token);
                let  options = {method: 'GET', url: url,  json: true};
                httpRequest(options,"getTicket")
                    .catch(function (err) {
                        reject(err);
                    }).then(function (result) {
                        result.expires_in= new Date().getTime() + 7100 * 1000;
                        ticket.saveTicket(result);
                        resolve( ticket.getTicket());
                });
            })
        }
    })
}


Wechat.init();







